J26:
Demonstrera förståelse för skillnaden mellan allokering på stacken och allokering på heapen med hjälp av ett C-program.

Hash_table_test.c:141 allokering på stacken
Hash_table.c:23 allokering på heapen

säg något om free-anrop

J27 och M37:
Demonstrera förståelse för minneshantering i C genom att skriva ett program med dynamiska strukturer som är fritt från
minnesläckage och argumentera för varför det är så (och verifiera med valgrind)
Redogör bland annat för:

Hur uppstår minnesläckage?
Vilken del av ett program ansvarar för att frigöra minne?
När avgör man att en bit allokerat minne är “färdiganvänt” och går att frigöra?
Vad kan hända om ett allokerat utrymme frigörs “för tidigt”?
På vilket sätt hjälper valgrind dig att undvika minnesläckage?


Visa att du kan implementera en länkad struktur i ett imperativt språk

våra entries se Hash_table.c:23 & Hash_table.c:49 & Hash_table.c:91.

M36:
Demonstrera att du förstår likheterna mellan pekare till konsekutiva minnesblock av element av en typ, och arrayer i C i ett i övrigt vettigt program
Vad översätts arr[42] till?
Vad översätts 42[arr] till? (detta kompilerar faktiskt, trots att det ser vansinigt ut)

Hash_table.c:56, enbart syntatic sugar kan lika gärna skriva *(buckets+bucket)
